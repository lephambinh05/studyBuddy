import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart' as fb_auth;
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:studybuddy/data/models/user.dart';
import 'package:studybuddy/data/sources/remote/firebase_auth_service.dart';
// import 'package:studybuddy/core/services/analytics_service.dart'; // N·∫øu c·∫ßn log analytics
// import 'package:studybuddy/data/sources/local/shared_prefs_service.dart'; // N·∫øu c·∫ßn l∆∞u session

// Tr·∫°ng th√°i x√°c th·ª±c
enum AuthStatus { unknown, authenticated, unauthenticated, authenticating, error }

class AuthState {
  final AuthStatus status;
  final fb_auth.User? firebaseUser; // User t·ª´ Firebase Auth
  final UserModel? appUser; // UserModel t·ª´ Firestore (th√¥ng tin chi ti·∫øt h∆°n)
  final String? errorMessage;

  AuthState({
    this.status = AuthStatus.unknown,
    this.firebaseUser,
    this.appUser,
    this.errorMessage,
  });

  AuthState copyWith({
    AuthStatus? status,
    fb_auth.User? firebaseUser,
    UserModel? appUser,
    String? errorMessage,
    bool clearAppUser = false, // C·ªù ƒë·ªÉ x√≥a appUser khi ƒëƒÉng xu·∫•t
  }) {
    return AuthState(
      status: status ?? this.status,
      firebaseUser: firebaseUser ?? this.firebaseUser,
      appUser: clearAppUser ? null : appUser ?? this.appUser,
      errorMessage: errorMessage ?? this.errorMessage,
    );
  }
}

class AuthNotifier extends StateNotifier<AuthState> {
  final FirebaseAuthService _firebaseAuthService; // Changed to non-nullable
  // final AnalyticsService? _analyticsService; // T√πy ch·ªçn
  StreamSubscription<fb_auth.User?>? _authStateSubscription;
  StreamSubscription<UserModel?>? _appUserSubscription;

  AuthNotifier(this._firebaseAuthService /*, this._analyticsService */)
      : super(AuthState(status: AuthStatus.unknown)) {
    _listenToAuthChanges();
  }

  void _listenToAuthChanges() {
    _authStateSubscription?.cancel();
    _authStateSubscription = _firebaseAuthService.authStateChanges.listen((fbUser) async {
      if (fbUser != null) {
        // User ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi Firebase
        state = state.copyWith(status: AuthStatus.authenticating, firebaseUser: fbUser, errorMessage: null);
        _fetchAppUser(fbUser.uid);
        // Kh√¥ng l∆∞u token c·ª•c b·ªô - ch·ªâ s·ª≠ d·ª•ng Firebase Auth
      } else {
        // User ƒë√£ ƒëƒÉng xu·∫•t
        _appUserSubscription?.cancel();
        state = state.copyWith(
            status: AuthStatus.unauthenticated,
            firebaseUser: null,
            clearAppUser: true, // X√≥a th√¥ng tin appUser
            errorMessage: null);
        // Kh√¥ng c·∫ßn x√≥a session c·ª•c b·ªô - Firebase Auth t·ª± qu·∫£n l√Ω
      }
    });
  }

  Future<void> signInWithEmail(String email, String password) async {
    state = state.copyWith(status: AuthStatus.authenticating, errorMessage: null);
    try {
      final fbUser = await _firebaseAuthService.signInWithEmailAndPassword(email, password);
      if (fbUser == null) { // N√™n ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi listenToAuthChanges, nh∆∞ng ƒë·ªÉ ch·∫Øc ch·∫Øn
        state = state.copyWith(status: AuthStatus.unauthenticated, errorMessage: "Login failed.");
      }
      // _analyticsService?.logLogin('email');
    } catch (e) {
      String errorMessage = "Login failed.";
      
      // X·ª≠ l√Ω c√°c l·ªói Firebase c·ª• th·ªÉ
      if (e.toString().contains('user-not-found')) {
        errorMessage = "Email not found. Please check again or register a new account.";
      } else if (e.toString().contains('wrong-password')) {
        errorMessage = "Wrong password. Please check again.";
      } else if (e.toString().contains('invalid-email')) {
        errorMessage = "Invalid email. Please check again.";
      } else if (e.toString().contains('user-disabled')) {
        errorMessage = "Account has been disabled. Please contact support.";
      } else if (e.toString().contains('too-many-requests')) {
        errorMessage = "Too many login attempts. Please try again later.";
      } else if (e.toString().contains('network')) {
        errorMessage = "Network error. Please check your internet connection.";
      } else if (e.toString().contains('api-key-not-valid')) {
        errorMessage = "Firebase configuration error. Please contact the developer.";
      } else if (e.toString().contains('internal-error')) {
        errorMessage = "System error. Please try again later.";
      } else if (e.toString().contains('invalid-credential')) {
        errorMessage = "Invalid login information.";
      } else if (e.toString().contains('operation-not-allowed')) {
        errorMessage = "This login method is not supported.";
      } else if (e.toString().contains('weak-password')) {
        errorMessage = "Weak password. Please choose a stronger password.";
      } else if (e.toString().contains('email-already-in-use')) {
        errorMessage = "Email already in use. Please login or use a different email.";
      }
      
      print("‚ùå Auth error: $e");
      state = state.copyWith(status: AuthStatus.unauthenticated, errorMessage: errorMessage);
    }
  }

  Future<void> registerWithEmail(String email, String password, String displayName) async {
    state = state.copyWith(status: AuthStatus.authenticating, errorMessage: null);
    try {
      final fbUser = await _firebaseAuthService.registerWithEmailAndPassword(email, password, displayName);
      if (fbUser == null) {
        state = state.copyWith(status: AuthStatus.unauthenticated, errorMessage: "Registration failed.");
      }
      // _analyticsService?.logSignUp('email');
    } catch (e) {
      String errorMessage = "Registration failed.";
      
      if (e.toString().contains('email-already-in-use')) {
        errorMessage = "Email already in use. Please login or use a different email.";
      } else if (e.toString().contains('weak-password')) {
        errorMessage = "Weak password. Please choose a stronger password.";
      } else if (e.toString().contains('invalid-email')) {
        errorMessage = "Invalid email. Please check again.";
      } else if (e.toString().contains('operation-not-allowed')) {
        errorMessage = "Registration by email is not supported.";
      } else if (e.toString().contains('api-key-not-valid')) {
        errorMessage = "Firebase configuration error. Please contact the developer.";
      }
      
      state = state.copyWith(status: AuthStatus.unauthenticated, errorMessage: errorMessage);
    }
  }

  Future<void> signOut() async {
    try {
      print("üîÑ AuthNotifier: B·∫Øt ƒë·∫ßu ƒëƒÉng xu·∫•t...");
      
      // ƒêƒÉng xu·∫•t kh·ªèi Firebase Auth
      await _firebaseAuthService.signOut();
      print("‚úÖ AuthNotifier: ƒê√£ ƒëƒÉng xu·∫•t kh·ªèi Firebase Auth");
      
      // H·ªßy c√°c subscription
      _appUserSubscription?.cancel();
      print("‚úÖ AuthNotifier: ƒê√£ h·ªßy app user subscription");
      
      // Clear t·∫•t c·∫£ data
      await _clearAllData();
      print("‚úÖ AuthNotifier: ƒê√£ clear t·∫•t c·∫£ data");
      
      // C·∫≠p nh·∫≠t state v·ªÅ unauthenticated
      state = state.copyWith(
        status: AuthStatus.unauthenticated,
        firebaseUser: null,
        clearAppUser: true,
        errorMessage: null,
      );
      print("‚úÖ AuthNotifier: ƒê√£ c·∫≠p nh·∫≠t state v·ªÅ unauthenticated");
      
      // _analyticsService?.logLogout();
      print("üéâ AuthNotifier: ƒêƒÉng xu·∫•t th√†nh c√¥ng");
    } catch (e) {
      print("‚ùå AuthNotifier: L·ªói khi ƒëƒÉng xu·∫•t: $e");
      
      // V·∫´n set state v·ªÅ unauthenticated ngay c·∫£ khi c√≥ l·ªói
      _appUserSubscription?.cancel();
      await _clearAllData();
      state = state.copyWith(
        status: AuthStatus.unauthenticated,
        firebaseUser: null,
        clearAppUser: true,
        errorMessage: null,
      );
      print("‚ö†Ô∏è AuthNotifier: ƒê√£ force logout do l·ªói");
    }
  }

  /// Clear t·∫•t c·∫£ data khi logout
  Future<void> _clearAllData() async {
    try {
      // Clear SharedPreferences (n·∫øu c·∫ßn)
      // final sharedPrefs = await SharedPreferences.getInstance();
      // await sharedPrefs.clear();
      
      // Clear c√°c provider kh√°c (n·∫øu c·∫ßn)
      // C√≥ th·ªÉ inject c√°c provider kh√°c ƒë·ªÉ clear
      
      print("‚úÖ AuthNotifier: ƒê√£ clear t·∫•t c·∫£ data");
    } catch (e) {
      print("‚ùå AuthNotifier: L·ªói khi clear data: $e");
    }
  }

  Future<void> sendPasswordResetEmail(String email) async {
    try {
      await _firebaseAuthService.sendPasswordResetEmail(email);
    } catch (e) {
      String errorMessage = "Sending password reset email failed.";
      
      if (e.toString().contains('user-not-found')) {
        errorMessage = "Email not found in the system.";
      } else if (e.toString().contains('invalid-email')) {
        errorMessage = "Invalid email.";
      } else if (e.toString().contains('api-key-not-valid')) {
        errorMessage = "Firebase configuration error. Please contact the developer.";
      }
      
      state = state.copyWith(errorMessage: errorMessage);
    }
  }

  // X√≥a error message
  void clearError() {
    state = state.copyWith(errorMessage: null);
  }

  Future<void> updateAppUser(UserModel user) async {
    try {
      await _firebaseAuthService.updateUser(user);
      state = state.copyWith(appUser: user);
    } catch (e) {
      print("‚ùå Update user error: $e");
      state = state.copyWith(errorMessage: "Update user information failed.");
    }
  }

  Future<void> _fetchAppUser(String userId) async {
    _appUserSubscription?.cancel();
    _appUserSubscription = _firebaseAuthService.getUserStream(userId).listen((appUser) {
      if (appUser != null) {
        state = state.copyWith(status: AuthStatus.authenticated, appUser: appUser, errorMessage: null);
      } else {
        // Th·ª≠ t·∫°o l·∫°i user data n·∫øu kh√¥ng t√¨m th·∫•y
        _tryRecreateUserData(userId);
      }
    });
  }

  Future<void> _tryRecreateUserData(String userId) async {
    try {
      await _firebaseAuthService.recreateUserData(userId);
      // Fetch l·∫°i user data
      _fetchAppUser(userId);
    } catch (e) {
      print("‚ùå Recreate user data error: $e");
      state = state.copyWith(status: AuthStatus.error, errorMessage: "Cannot load user information.");
    }
  }

  @override
  void dispose() {
    _authStateSubscription?.cancel();
    _appUserSubscription?.cancel();
    super.dispose();
  }
}

// Provider cho AuthNotifier
final authNotifierProvider = StateNotifierProvider<AuthNotifier, AuthState>((ref) {
  final firebaseAuthService = ref.watch(firebaseAuthServiceProvider);
  return AuthNotifier(firebaseAuthService);
});

// Provider ti·ªán √≠ch ƒë·ªÉ ch·ªâ l·∫•y tr·∫°ng th√°i AuthStatus
final authStatusProvider = Provider<AuthStatus>((ref) {
  return ref.watch(authNotifierProvider).status;
});

// Provider ti·ªán √≠ch ƒë·ªÉ ch·ªâ l·∫•y UserModel (appUser)
final appUserProvider = Provider<UserModel?>((ref) {
  return ref.watch(authNotifierProvider).appUser;
});

// Provider ti·ªán √≠ch ƒë·ªÉ ch·ªâ l·∫•y Firebase User
final firebaseUserProvider = Provider<fb_auth.User?>((ref) {
  return ref.watch(authNotifierProvider).firebaseUser;
});

