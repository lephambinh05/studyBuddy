const admin = require('firebase-admin');

// Kh·ªüi t·∫°o Firebase Admin SDK
if (!admin.apps.length) {
  try {
    // Th·ª≠ s·ª≠ d·ª•ng service account key
    const serviceAccount = require('./serviceAccountKey.json');
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount)
    });
    console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o Firebase v·ªõi service account key');
  } catch (error) {
    // S·ª≠ d·ª•ng Application Default Credentials
    admin.initializeApp();
    console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o Firebase v·ªõi Application Default Credentials');
  }
}

const db = admin.firestore();

async function deleteAllTasks() {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu x√≥a to√†n b·ªô tasks...');
    console.log('='.repeat(50));
    
    // L·∫•y collection 'tasks'
    const tasksRef = db.collection('tasks');
    
    // L·∫•y t·∫•t c·∫£ documents
    const snapshot = await tasksRef.get();
    
    if (snapshot.empty) {
      console.log('‚úÖ Kh√¥ng c√≥ tasks n√†o ƒë·ªÉ x√≥a!');
      return;
    }
    
    console.log(`üîç T√¨m th·∫•y ${snapshot.size} tasks ƒë·ªÉ x√≥a...`);
    
    let deletedCount = 0;
    
    // X√≥a t·ª´ng document
    for (const doc of snapshot.docs) {
      console.log(`üóëÔ∏è ƒêang x√≥a task: ${doc.id}`);
      console.log(`   Data:`, doc.data());
      
      await doc.ref.delete();
      deletedCount++;
    }
    
    console.log(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng ${deletedCount} tasks!`);
    
    // Ki·ªÉm tra l·∫°i
    const remainingSnapshot = await tasksRef.get();
    
    if (remainingSnapshot.empty) {
      console.log('‚úÖ Collection "tasks" ƒë√£ tr·ªëng!');
    } else {
      console.log(`‚ö†Ô∏è V·∫´n c√≤n ${remainingSnapshot.size} tasks (c√≥ th·ªÉ do l·ªói)`);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

// Ch·∫°y script
deleteAllTasks().then(() => {
  console.log('='.repeat(50));
  console.log('‚úÖ Ho√†n th√†nh!');
  process.exit(0);
}).catch((error) => {
  console.error('‚ùå Th·∫•t b·∫°i:', error);
  process.exit(1);
}); 