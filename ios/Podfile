# Uncomment this line to define a global platform for your project
platform :ios, '15.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Ultra minimal iOS build settings to avoid compiler conflicts
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      
      # Fix C++14 requirement for Firebase/Abseil
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++14'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
      
      # Remove ALL potentially problematic compiler flags
      config.build_settings.delete('GCC_OPTIMIZATION_LEVEL')
      config.build_settings.delete('GCC_PREPROCESSOR_DEFINITIONS')
      config.build_settings.delete('CLANG_WARN_STRICT_PROTOTYPES')
      config.build_settings.delete('CLANG_WARN_UNREACHABLE_CODE')
      config.build_settings.delete('CLANG_WARN_EMPTY_BODY')
      config.build_settings.delete('GCC_WARN_64_TO_32_BIT_CONVERSION')
      config.build_settings.delete('GCC_WARN_ABOUT_RETURN_TYPE')
      config.build_settings.delete('GCC_WARN_UNDECLARED_SELECTOR')
      config.build_settings.delete('GCC_WARN_UNINITIALIZED_AUTOS')
      config.build_settings.delete('GCC_WARN_UNUSED_FUNCTION')
      config.build_settings.delete('GCC_WARN_UNUSED_VARIABLE')
      config.build_settings.delete('CLANG_WARN_BOOL_CONVERSION')
      config.build_settings.delete('CLANG_WARN_CONSTANT_CONVERSION')
      config.build_settings.delete('CLANG_WARN_ENUM_CONVERSION')
      config.build_settings.delete('CLANG_WARN_INT_CONVERSION')
      config.build_settings.delete('CLANG_WARN_NON_LITERAL_NULL_CONVERSION')
      config.build_settings.delete('CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF')
      config.build_settings.delete('CLANG_WARN_OBJC_LITERAL_CONVERSION')
      config.build_settings.delete('CLANG_WARN_RANGE_LOOP_ANALYSIS')
      config.build_settings.delete('CLANG_WARN_SUSPICIOUS_MOVE')
      config.build_settings.delete('CLANG_WARN__DUPLICATE_METHOD_MATCH')
      
      # Set safe defaults
      config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu99'
      config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      config.build_settings['CLANG_ENABLE_OBJC_ARC'] = 'YES'
      
      # Additional fixes for Codemagic
      config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
      config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
    end
  end
end
