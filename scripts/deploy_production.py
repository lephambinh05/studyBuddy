#!/usr/bin/env python3
"""
Script ƒë·ªÉ deploy ·ª©ng d·ª•ng StudyBuddy v·ªõi real data
S·ª≠ d·ª•ng: python scripts/deploy_production.py
"""

import firebase_admin
from firebase_admin import credentials, firestore
import json
import datetime
import os
import sys
from typing import Dict, List, Any

class StudyBuddyDeployer:
    def __init__(self, service_account_path: str):
        """
        Kh·ªüi t·∫°o deployer v·ªõi Firebase credentials
        """
        if not os.path.exists(service_account_path):
            raise FileNotFoundError(f"Service Account key kh√¥ng t·ªìn t·∫°i: {service_account_path}")
        
        cred = credentials.Certificate(service_account_path)
        firebase_admin.initialize_app(cred)
        self.db = firestore.client()
        print("‚úÖ ƒê√£ k·∫øt n·ªëi Firebase Production th√†nh c√¥ng!")

    def backup_current_data(self) -> Dict[str, Any]:
        """
        Backup data hi·ªán t·∫°i tr∆∞·ªõc khi deploy
        """
        print("üì¶ ƒêang backup data hi·ªán t·∫°i...")
        
        backup = {
            'tasks': [],
            'events': [],
            'users': [],
            'timestamp': datetime.datetime.now().isoformat(),
            'backup_type': 'pre_deploy'
        }
        
        try:
            # Backup tasks
            try:
                tasks = self.db.collection('tasks').get()
                backup['tasks'] = [doc.to_dict() for doc in tasks.docs]
                print(f"‚úÖ Backup {len(backup['tasks'])} tasks")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng c√≥ tasks ƒë·ªÉ backup: {e}")
            
            # Backup events
            try:
                events = self.db.collection('events').get()
                backup['events'] = [doc.to_dict() for doc in events.docs]
                print(f"‚úÖ Backup {len(backup['events'])} events")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng c√≥ events ƒë·ªÉ backup: {e}")
            
            # Backup users
            try:
                users = self.db.collection('users').get()
                backup['users'] = [doc.to_dict() for doc in users.docs]
                print(f"‚úÖ Backup {len(backup['users'])} users")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng c√≥ users ƒë·ªÉ backup: {e}")
            
            # L∆∞u backup
            backup_file = f"backup_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup, f, ensure_ascii=False, indent=2)
            
            print(f"‚úÖ Backup ƒë√£ l∆∞u v√†o: {backup_file}")
            return backup
            
        except Exception as e:
            print(f"‚ùå L·ªói backup: {e}")
            raise e

    def deploy_production_data(self, data_file: str = None):
        """
        Deploy production data
        """
        print("üöÄ B·∫Øt ƒë·∫ßu deploy production data...")
        
        # Backup tr∆∞·ªõc khi deploy
        self.backup_current_data()
        
        # Load production data
        if data_file and os.path.exists(data_file):
            with open(data_file, 'r', encoding='utf-8') as f:
                production_data = json.load(f)
        else:
            production_data = self.get_production_data()
        
        # Clear existing data
        print("üóëÔ∏è ƒêang x√≥a data c≈©...")
        self.clear_collection('tasks')
        self.clear_collection('events')
        self.clear_collection('users')
        
        # Deploy new data
        print("üìä ƒêang deploy production data...")
        self.import_tasks(production_data['tasks'])
        self.import_events(production_data['events'])
        self.import_users(production_data['users'])
        
        print("üéâ Deploy production th√†nh c√¥ng!")

    def get_production_data(self) -> Dict[str, List[Dict[str, Any]]]:
        """
        T·∫°o production data v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø
        """
        now = datetime.datetime.now()
        
        # Production Tasks - D·ªØ li·ªáu th·ª±c t·∫ø h∆°n
        tasks = [
            {
                'title': 'Ho√†n th√†nh b√†i t·∫≠p To√°n ch∆∞∆°ng 3 - ƒê·∫°o h√†m',
                'description': 'L√†m b√†i t·∫≠p t·ª´ trang 45-50, b√†i 1-10 trong s√°ch gi√°o khoa ƒê·∫°i s·ªë 12',
                'subject': 'To√°n',
                'deadline': (now + datetime.timedelta(days=3)).isoformat(),
                'isCompleted': False,
                'priority': 2,
                'createdAt': (now - datetime.timedelta(days=2)).isoformat(),
                'completedAt': None
            },
            {
                'title': '√în t·∫≠p t·ª´ v·ª±ng ti·∫øng Anh Unit 5 - Technology',
                'description': 'H·ªçc 50 t·ª´ m·ªõi v·ªÅ c√¥ng ngh·ªá, l√†m b√†i t·∫≠p vocabulary v√† grammar',
                'subject': 'Anh',
                'deadline': (now + datetime.timedelta(days=2)).isoformat(),
                'isCompleted': True,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=5)).isoformat(),
                'completedAt': (now - datetime.timedelta(hours=4)).isoformat()
            },
            {
                'title': 'Ph√¢n t√≠ch t√°c ph·∫©m "Truy·ªán Ki·ªÅu" - Nguy·ªÖn Du',
                'description': 'ƒê·ªçc v√† ph√¢n t√≠ch c√°c ƒëo·∫°n tr√≠ch, chu·∫©n b·ªã cho b√†i ki·ªÉm tra vƒÉn h·ªçc',
                'subject': 'VƒÉn',
                'deadline': (now + datetime.timedelta(days=5)).isoformat(),
                'isCompleted': False,
                'priority': 3,
                'createdAt': (now - datetime.timedelta(days=1)).isoformat(),
                'completedAt': None
            },
            {
                'title': 'Th√≠ nghi·ªám H√≥a h·ªçc - Ph·∫£n ·ª©ng oxi h√≥a kh·ª≠',
                'description': 'Th·ª±c h√†nh th√≠ nghi·ªám trong ph√≤ng lab, vi·∫øt b√°o c√°o th√≠ nghi·ªám',
                'subject': 'H√≥a',
                'deadline': (now + datetime.timedelta(days=1)).isoformat(),
                'isCompleted': False,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=3)).isoformat(),
                'completedAt': None
            },
            {
                'title': '√în t·∫≠p V·∫≠t l√Ω - Ch∆∞∆°ng ƒëi·ªán h·ªçc v√† t·ª´ h·ªçc',
                'description': 'H·ªçc l√Ω thuy·∫øt v√† l√†m b√†i t·∫≠p v·ªÅ ƒëi·ªán tr∆∞·ªùng, t·ª´ tr∆∞·ªùng',
                'subject': 'L√Ω',
                'deadline': (now + datetime.timedelta(days=4)).isoformat(),
                'isCompleted': False,
                'priority': 2,
                'createdAt': (now - datetime.timedelta(days=2)).isoformat(),
                'completedAt': None
            },
            {
                'title': 'B√†i t·∫≠p Sinh h·ªçc - H·ªá tu·∫ßn ho√†n v√† h√¥ h·∫•p',
                'description': 'Ho√†n th√†nh b√†i t·∫≠p v·ªÅ c·∫•u t·∫°o v√† ch·ª©c nƒÉng h·ªá tu·∫ßn ho√†n',
                'subject': 'Sinh',
                'deadline': (now + datetime.timedelta(days=6)).isoformat(),
                'isCompleted': False,
                'priority': 2,
                'createdAt': (now - datetime.timedelta(days=1)).isoformat(),
                'completedAt': None
            },
            {
                'title': '√în t·∫≠p L·ªãch s·ª≠ - Vi·ªát Nam 1945-1975',
                'description': 'H·ªçc thu·ªôc c√°c s·ª± ki·ªán l·ªãch s·ª≠ quan tr·ªçng, chu·∫©n b·ªã cho b√†i ki·ªÉm tra',
                'subject': 'S·ª≠',
                'deadline': (now + datetime.timedelta(days=7)).isoformat(),
                'isCompleted': False,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=3)).isoformat(),
                'completedAt': None
            },
            {
                'title': 'Ph√¢n t√≠ch bi·ªÉu ƒë·ªì ƒê·ªãa l√Ω - Kh√≠ h·∫≠u v√† ƒë·ªãa h√¨nh',
                'description': 'L√†m b√†i t·∫≠p ph√¢n t√≠ch bi·ªÉu ƒë·ªì kh√≠ h·∫≠u c√°c v√πng mi·ªÅn Vi·ªát Nam',
                'subject': 'ƒê·ªãa',
                'deadline': (now + datetime.timedelta(days=8)).isoformat(),
                'isCompleted': False,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=2)).isoformat(),
                'completedAt': None
            }
        ]

        # Production Events - S·ª± ki·ªán th·ª±c t·∫ø
        events = [
            {
                'title': 'H·ªçc nh√≥m To√°n - √în t·∫≠p ƒë·∫°o h√†m',
                'description': 'Th·∫£o lu·∫≠n nh√≥m v·ªÅ c√°c d·∫°ng b√†i t·∫≠p ƒë·∫°o h√†m v√† ·ª©ng d·ª•ng',
                'startTime': (now + datetime.timedelta(hours=2)).isoformat(),
                'endTime': (now + datetime.timedelta(hours=4)).isoformat(),
                'type': 'study',
                'subject': 'To√°n',
                'location': 'Th∆∞ vi·ªán tr∆∞·ªùng',
                'isAllDay': False,
                'color': '#FF6B6B'
            },
            {
                'title': 'Ki·ªÉm tra 15 ph√∫t VƒÉn h·ªçc',
                'description': 'Ki·ªÉm tra v·ªÅ t√°c ph·∫©m "Truy·ªán Ki·ªÅu" c·ªßa Nguy·ªÖn Du',
                'startTime': (now + datetime.timedelta(days=1, hours=8)).isoformat(),
                'endTime': (now + datetime.timedelta(days=1, hours=8, minutes=15)).isoformat(),
                'type': 'exam',
                'subject': 'VƒÉn',
                'location': 'L·ªõp 12A1',
                'isAllDay': False,
                'color': '#4ECDC4'
            },
            {
                'title': 'Th√≠ nghi·ªám H√≥a h·ªçc - Ph√≤ng lab',
                'description': 'Th·ª±c h√†nh th√≠ nghi·ªám ph·∫£n ·ª©ng oxi h√≥a kh·ª≠',
                'startTime': (now + datetime.timedelta(days=2, hours=14)).isoformat(),
                'endTime': (now + datetime.timedelta(days=2, hours=16)).isoformat(),
                'type': 'study',
                'subject': 'H√≥a',
                'location': 'Ph√≤ng th√≠ nghi·ªám H√≥a h·ªçc',
                'isAllDay': False,
                'color': '#45B7D1'
            },
            {
                'title': 'Thi th·ª≠ ƒê·∫°i h·ªçc - To√°n v√† VƒÉn',
                'description': 'L√†m b√†i thi th·ª≠ m√¥n To√°n v√† VƒÉn theo c·∫•u tr√∫c ƒë·ªÅ thi THPT Qu·ªëc gia',
                'startTime': (now + datetime.timedelta(days=3, hours=7)).isoformat(),
                'endTime': (now + datetime.timedelta(days=3, hours=11)).isoformat(),
                'type': 'exam',
                'subject': None,
                'location': 'H·ªôi tr∆∞·ªùng tr∆∞·ªùng',
                'isAllDay': False,
                'color': '#96CEB4'
            },
            {
                'title': 'D√£ ngo·∫°i h·ªçc t·∫≠p - B·∫£o t√†ng L·ªãch s·ª≠',
                'description': 'Tham quan b·∫£o t√†ng l·ªãch s·ª≠ v√† ƒë·ªãa l√Ω ƒë·ªÉ h·ªçc t·∫≠p th·ª±c t·∫ø',
                'startTime': (now + datetime.timedelta(days=5, hours=8)).isoformat(),
                'endTime': (now + datetime.timedelta(days=5, hours=17)).isoformat(),
                'type': 'other',
                'subject': None,
                'location': 'B·∫£o t√†ng L·ªãch s·ª≠ Vi·ªát Nam',
                'isAllDay': True,
                'color': '#FFEAA7'
            }
        ]

        # Production Users - Th√¥ng tin th·ª±c t·∫ø
        users = [
            {
                'name': 'Nguy·ªÖn VƒÉn An',
                'email': 'an.nguyen@student.edu.vn',
                'avatar': 'https://example.com/avatar1.jpg',
                'grade': '12',
                'school': 'THPT Chuy√™n H√† N·ªôi - Amsterdam',
                'createdAt': (now - datetime.timedelta(days=30)).isoformat(),
                'lastLoginAt': now.isoformat()
            },
            {
                'name': 'Tr·∫ßn Th·ªã B√¨nh',
                'email': 'binh.tran@student.edu.vn',
                'avatar': 'https://example.com/avatar2.jpg',
                'grade': '12',
                'school': 'THPT Chuy√™n H√† N·ªôi - Amsterdam',
                'createdAt': (now - datetime.timedelta(days=25)).isoformat(),
                'lastLoginAt': (now - datetime.timedelta(hours=2)).isoformat()
            },
            {
                'name': 'L√™ Ho√†ng C∆∞·ªùng',
                'email': 'cuong.le@student.edu.vn',
                'avatar': 'https://example.com/avatar3.jpg',
                'grade': '12',
                'school': 'THPT Chuy√™n H√† N·ªôi - Amsterdam',
                'createdAt': (now - datetime.timedelta(days=20)).isoformat(),
                'lastLoginAt': (now - datetime.timedelta(hours=5)).isoformat()
            }
        ]

        return {
            'tasks': tasks,
            'events': events,
            'users': users
        }

    def import_tasks(self, tasks_data: List[Dict[str, Any]]):
        """Import tasks"""
        print(f"üìù ƒêang import {len(tasks_data)} production tasks...")
        batch = self.db.batch()
        tasks_ref = self.db.collection('tasks')
        
        for task_data in tasks_data:
            doc_ref = tasks_ref.document()
            firestore_data = {
                'id': doc_ref.id,
                'title': task_data['title'],
                'description': task_data.get('description'),
                'subject': task_data['subject'],
                'deadline': task_data['deadline'],
                'isCompleted': task_data['isCompleted'],
                'priority': task_data['priority'],
                'createdAt': task_data['createdAt'],
                'completedAt': task_data.get('completedAt')
            }
            batch.set(doc_ref, firestore_data)
        
        batch.commit()
        print(f"‚úÖ ƒê√£ import {len(tasks_data)} production tasks th√†nh c√¥ng!")

    def import_events(self, events_data: List[Dict[str, Any]]):
        """Import events"""
        print(f"üìÖ ƒêang import {len(events_data)} production events...")
        batch = self.db.batch()
        events_ref = self.db.collection('events')
        
        for event_data in events_data:
            doc_ref = events_ref.document()
            firestore_data = {
                'id': doc_ref.id,
                'title': event_data['title'],
                'description': event_data.get('description'),
                'startTime': event_data['startTime'],
                'endTime': event_data['endTime'],
                'type': event_data['type'],
                'subject': event_data.get('subject'),
                'location': event_data.get('location'),
                'isAllDay': event_data['isAllDay'],
                'color': event_data['color']
            }
            batch.set(doc_ref, firestore_data)
        
        batch.commit()
        print(f"‚úÖ ƒê√£ import {len(events_data)} production events th√†nh c√¥ng!")

    def import_users(self, users_data: List[Dict[str, Any]]):
        """Import users"""
        print(f"üë§ ƒêang import {len(users_data)} production users...")
        batch = self.db.batch()
        users_ref = self.db.collection('users')
        
        for user_data in users_data:
            doc_ref = users_ref.document()
            firestore_data = {
                'id': doc_ref.id,
                'name': user_data['name'],
                'email': user_data['email'],
                'avatar': user_data.get('avatar'),
                'grade': user_data.get('grade'),
                'school': user_data.get('school'),
                'createdAt': user_data['createdAt'],
                'lastLoginAt': user_data.get('lastLoginAt')
            }
            batch.set(doc_ref, firestore_data)
        
        batch.commit()
        print(f"‚úÖ ƒê√£ import {len(users_data)} production users th√†nh c√¥ng!")

    def clear_collection(self, collection_name: str):
        """Clear collection"""
        print(f"üóëÔ∏è ƒêang x√≥a collection '{collection_name}'...")
        docs = self.db.collection(collection_name).stream()
        batch = self.db.batch()
        
        for doc in docs:
            batch.delete(doc.reference)
        
        batch.commit()
        print(f"‚úÖ ƒê√£ x√≥a collection '{collection_name}' th√†nh c√¥ng!")

def main():
    """Main function"""
    print("üöÄ StudyBuddy Production Deploy Script")
    print("=" * 50)
    
    # Ki·ªÉm tra Service Account key
    service_account_path = "studybuddy-8bfaa-firebase-adminsdk-fbsvc-76aae6727d.json"
    
    if not os.path.exists(service_account_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y Service Account key: {service_account_path}")
        print("üìù Vui l√≤ng ƒë·∫∑t file Service Account key trong th∆∞ m·ª•c scripts/")
        sys.exit(1)
    
    try:
        # Kh·ªüi t·∫°o deployer
        deployer = StudyBuddyDeployer(service_account_path)
        
        # H·ªèi user c√≥ mu·ªën deploy kh√¥ng
        deploy = input("üöÄ C√≥ mu·ªën deploy production data kh√¥ng? (y/N): ").lower().strip() == 'y'
        
        if deploy:
            # H·ªèi c√≥ mu·ªën s·ª≠ d·ª•ng file data t√πy ch·ªânh kh√¥ng
            custom_data = input("üìÅ C√≥ mu·ªën s·ª≠ d·ª•ng file data t√πy ch·ªânh kh√¥ng? (y/N): ").lower().strip() == 'y'
            
            data_file = None
            if custom_data:
                data_file = input("üìÇ Nh·∫≠p ƒë∆∞·ªùng d·∫´n file data (JSON): ").strip()
                if not os.path.exists(data_file):
                    print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {data_file}")
                    data_file = None
            
            # Deploy production data
            deployer.deploy_production_data(data_file)
            
            print("\nüéâ Deploy production th√†nh c√¥ng!")
            print("=" * 50)
            print("üìä Production data ƒë√£ ƒë∆∞·ª£c deploy:")
            print("   - 8 production tasks")
            print("   - 5 production events") 
            print("   - 3 production users")
            print("=" * 50)
        else:
            print("‚ùå H·ªßy deploy")
            
    except Exception as e:
        print(f"‚ùå L·ªói deploy: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 