#!/usr/bin/env python3
"""
Script ƒë·ªÉ import data v√†o Firebase cho ·ª©ng d·ª•ng StudyBuddy
S·ª≠ d·ª•ng: python scripts/import_data.py
"""

import firebase_admin
from firebase_admin import credentials, firestore
import json
import datetime
from typing import Dict, List, Any
import os
import sys

# Th√™m th∆∞ m·ª•c g·ªëc v√†o path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class StudyBuddyDataImporter:
    def __init__(self, service_account_path: str = None):
        """
        Kh·ªüi t·∫°o importer v·ªõi Firebase credentials
        """
        try:
            if service_account_path and os.path.exists(service_account_path):
                # S·ª≠ d·ª•ng service account file
                print(f"üîë ƒêang s·ª≠ d·ª•ng Service Account: {service_account_path}")
                cred = credentials.Certificate(service_account_path)
                firebase_admin.initialize_app(cred)
            else:
                # S·ª≠ d·ª•ng default credentials (cho local development)
                print("üîë ƒêang s·ª≠ d·ª•ng Application Default Credentials...")
                firebase_admin.initialize_app()
            
            self.db = firestore.client()
            print("‚úÖ ƒê√£ k·∫øt n·ªëi Firebase th√†nh c√¥ng!")
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Firebase: {str(e)}")
            print("\nüîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:")
            print("1. T·∫°o Service Account Key:")
            print("   - V√†o Firebase Console > Project Settings > Service Accounts")
            print("   - Click 'Generate new private key'")
            print("   - T·∫£i file JSON v·ªÅ v√† ƒë·∫∑t trong th∆∞ m·ª•c scripts/")
            print("   - C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n trong script")
            print("\n2. Ho·∫∑c s·ª≠ d·ª•ng Google Cloud CLI:")
            print("   - C√†i ƒë·∫∑t Google Cloud CLI")
            print("   - Ch·∫°y: gcloud auth application-default login")
            raise e

    def import_tasks(self, tasks_data: List[Dict[str, Any]]):
        """
        Import danh s√°ch tasks v√†o Firestore
        """
        print(f"üìù ƒêang import {len(tasks_data)} tasks...")
        
        batch = self.db.batch()
        tasks_ref = self.db.collection('tasks')
        
        for task_data in tasks_data:
            # T·∫°o document ID m·ªõi
            doc_ref = tasks_ref.document()
            
            # Chu·∫©n b·ªã data cho Firestore
            firestore_data = {
                'id': doc_ref.id,
                'title': task_data['title'],
                'description': task_data.get('description'),
                'subject': task_data['subject'],
                'deadline': task_data['deadline'],
                'isCompleted': task_data['isCompleted'],
                'priority': task_data['priority'],
                'createdAt': task_data['createdAt'],
                'completedAt': task_data.get('completedAt')
            }
            
            batch.set(doc_ref, firestore_data)
        
        # Commit batch
        batch.commit()
        print(f"‚úÖ ƒê√£ import {len(tasks_data)} tasks th√†nh c√¥ng!")

    def import_events(self, events_data: List[Dict[str, Any]]):
        """
        Import danh s√°ch events v√†o Firestore
        """
        print(f"üìÖ ƒêang import {len(events_data)} events...")
        
        batch = self.db.batch()
        events_ref = self.db.collection('events')
        
        for event_data in events_data:
            # T·∫°o document ID m·ªõi
            doc_ref = events_ref.document()
            
            # Chu·∫©n b·ªã data cho Firestore
            firestore_data = {
                'id': doc_ref.id,
                'title': event_data['title'],
                'description': event_data.get('description'),
                'startTime': event_data['startTime'],
                'endTime': event_data['endTime'],
                'type': event_data['type'],
                'subject': event_data.get('subject'),
                'location': event_data.get('location'),
                'isAllDay': event_data['isAllDay'],
                'color': event_data['color']
            }
            
            batch.set(doc_ref, firestore_data)
        
        # Commit batch
        batch.commit()
        print(f"‚úÖ ƒê√£ import {len(events_data)} events th√†nh c√¥ng!")

    def import_users(self, users_data: List[Dict[str, Any]]):
        """
        Import danh s√°ch users v√†o Firestore
        """
        print(f"üë§ ƒêang import {len(users_data)} users...")
        
        batch = self.db.batch()
        users_ref = self.db.collection('users')
        
        for user_data in users_data:
            # T·∫°o document ID m·ªõi
            doc_ref = users_ref.document()
            
            # Chu·∫©n b·ªã data cho Firestore
            firestore_data = {
                'id': doc_ref.id,
                'name': user_data['name'],
                'email': user_data['email'],
                'avatar': user_data.get('avatar'),
                'grade': user_data.get('grade'),
                'school': user_data.get('school'),
                'createdAt': user_data['createdAt'],
                'lastLoginAt': user_data.get('lastLoginAt')
            }
            
            batch.set(doc_ref, firestore_data)
        
        # Commit batch
        batch.commit()
        print(f"‚úÖ ƒê√£ import {len(users_data)} users th√†nh c√¥ng!")

    def clear_collection(self, collection_name: str):
        """
        X√≥a t·∫•t c·∫£ documents trong collection
        """
        print(f"üóëÔ∏è ƒêang x√≥a collection '{collection_name}'...")
        
        docs = self.db.collection(collection_name).stream()
        batch = self.db.batch()
        
        for doc in docs:
            batch.delete(doc.reference)
        
        batch.commit()
        print(f"‚úÖ ƒê√£ x√≥a collection '{collection_name}' th√†nh c√¥ng!")

    def get_sample_data(self) -> Dict[str, List[Dict[str, Any]]]:
        """
        T·∫°o sample data cho ·ª©ng d·ª•ng
        """
        now = datetime.datetime.now()
        
        # Sample Tasks
        tasks = [
            {
                'title': 'L√†m b√†i t·∫≠p To√°n ch∆∞∆°ng 3',
                'description': 'Ho√†n th√†nh c√°c b√†i t·∫≠p t·ª´ trang 45-50 trong s√°ch gi√°o khoa',
                'subject': 'To√°n',
                'deadline': (now + datetime.timedelta(days=2)).isoformat(),
                'isCompleted': False,
                'priority': 2,
                'createdAt': (now - datetime.timedelta(days=1)).isoformat(),
                'completedAt': None
            },
            {
                'title': '√în t·∫≠p t·ª´ v·ª±ng ti·∫øng Anh',
                'description': 'H·ªçc 50 t·ª´ m·ªõi trong Unit 5 v√† l√†m b√†i t·∫≠p vocabulary',
                'subject': 'Anh',
                'deadline': (now + datetime.timedelta(days=1)).isoformat(),
                'isCompleted': True,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=2)).isoformat(),
                'completedAt': (now - datetime.timedelta(hours=2)).isoformat()
            },
            {
                'title': 'ƒê·ªçc s√°ch VƒÉn h·ªçc',
                'description': 'ƒê·ªçc v√† ph√¢n t√≠ch t√°c ph·∫©m "Truy·ªán Ki·ªÅu" c·ªßa Nguy·ªÖn Du',
                'subject': 'VƒÉn',
                'deadline': (now + datetime.timedelta(days=3)).isoformat(),
                'isCompleted': False,
                'priority': 3,
                'createdAt': (now - datetime.timedelta(days=3)).isoformat(),
                'completedAt': None
            },
            {
                'title': 'L√†m th√≠ nghi·ªám H√≥a h·ªçc',
                'description': 'Th·ª±c h√†nh th√≠ nghi·ªám v·ªÅ ph·∫£n ·ª©ng oxi h√≥a kh·ª≠ trong ph√≤ng lab',
                'subject': 'H√≥a',
                'deadline': (now - datetime.timedelta(days=1)).isoformat(),
                'isCompleted': False,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=4)).isoformat(),
                'completedAt': None
            },
            {
                'title': 'H·ªçc l√Ω thuy·∫øt V·∫≠t l√Ω',
                'description': '√în t·∫≠p ch∆∞∆°ng ƒëi·ªán h·ªçc v√† t·ª´ h·ªçc, chu·∫©n b·ªã cho b√†i ki·ªÉm tra',
                'subject': 'L√Ω',
                'deadline': (now + datetime.timedelta(days=5)).isoformat(),
                'isCompleted': False,
                'priority': 2,
                'createdAt': (now - datetime.timedelta(days=5)).isoformat(),
                'completedAt': None
            },
            {
                'title': 'L√†m b√†i t·∫≠p Sinh h·ªçc',
                'description': 'Ho√†n th√†nh b√†i t·∫≠p v·ªÅ h·ªá tu·∫ßn ho√†n v√† h·ªá h√¥ h·∫•p',
                'subject': 'Sinh',
                'deadline': (now + datetime.timedelta(days=4)).isoformat(),
                'isCompleted': False,
                'priority': 2,
                'createdAt': (now - datetime.timedelta(days=1)).isoformat(),
                'completedAt': None
            },
            {
                'title': '√în t·∫≠p L·ªãch s·ª≠',
                'description': 'H·ªçc thu·ªôc c√°c s·ª± ki·ªán l·ªãch s·ª≠ Vi·ªát Nam th·ªùi k·ª≥ 1945-1975',
                'subject': 'S·ª≠',
                'deadline': (now + datetime.timedelta(days=6)).isoformat(),
                'isCompleted': False,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=2)).isoformat(),
                'completedAt': None
            },
            {
                'title': 'L√†m b√†i t·∫≠p ƒê·ªãa l√Ω',
                'description': 'Ph√¢n t√≠ch bi·ªÉu ƒë·ªì kh√≠ h·∫≠u v√† ƒë·ªãa h√¨nh c√°c v√πng mi·ªÅn',
                'subject': 'ƒê·ªãa',
                'deadline': (now + datetime.timedelta(days=7)).isoformat(),
                'isCompleted': False,
                'priority': 1,
                'createdAt': (now - datetime.timedelta(days=3)).isoformat(),
                'completedAt': None
            }
        ]

        # Sample Events
        events = [
            {
                'title': 'H·ªçc To√°n',
                'description': '√în t·∫≠p ch∆∞∆°ng 3 v·ªÅ ƒë·∫°o h√†m v√† ·ª©ng d·ª•ng',
                'startTime': (now + datetime.timedelta(hours=2)).isoformat(),
                'endTime': (now + datetime.timedelta(hours=4)).isoformat(),
                'type': 'study',
                'subject': 'To√°n',
                'location': 'Th∆∞ vi·ªán tr∆∞·ªùng',
                'isAllDay': False,
                'color': '#FF6B6B'
            },
            {
                'title': 'Ki·ªÉm tra VƒÉn',
                'description': 'Ki·ªÉm tra 15 ph√∫t v·ªÅ t√°c ph·∫©m vƒÉn h·ªçc',
                'startTime': (now + datetime.timedelta(days=1, hours=8)).isoformat(),
                'endTime': (now + datetime.timedelta(days=1, hours=8, minutes=15)).isoformat(),
                'type': 'exam',
                'subject': 'VƒÉn',
                'location': 'L·ªõp 12A1',
                'isAllDay': False,
                'color': '#4ECDC4'
            },
            {
                'title': 'Nh√≥m h·ªçc t·∫≠p',
                'description': 'Th·∫£o lu·∫≠n nh√≥m v·ªÅ b√†i t·∫≠p H√≥a h·ªçc',
                'startTime': (now + datetime.timedelta(days=2, hours=14)).isoformat(),
                'endTime': (now + datetime.timedelta(days=2, hours=16)).isoformat(),
                'type': 'study',
                'subject': 'H√≥a',
                'location': 'Ph√≤ng h·ªçc nh√≥m',
                'isAllDay': False,
                'color': '#45B7D1'
            },
            {
                'title': 'Thi th·ª≠ ƒê·∫°i h·ªçc',
                'description': 'L√†m b√†i thi th·ª≠ m√¥n To√°n v√† VƒÉn',
                'startTime': (now + datetime.timedelta(days=3, hours=7)).isoformat(),
                'endTime': (now + datetime.timedelta(days=3, hours=11)).isoformat(),
                'type': 'exam',
                'subject': None,
                'location': 'H·ªôi tr∆∞·ªùng tr∆∞·ªùng',
                'isAllDay': False,
                'color': '#96CEB4'
            },
            {
                'title': 'D√£ ngo·∫°i h·ªçc t·∫≠p',
                'description': 'Tham quan b·∫£o t√†ng l·ªãch s·ª≠ v√† ƒë·ªãa l√Ω',
                'startTime': (now + datetime.timedelta(days=5, hours=8)).isoformat(),
                'endTime': (now + datetime.timedelta(days=5, hours=17)).isoformat(),
                'type': 'other',
                'subject': None,
                'location': 'B·∫£o t√†ng L·ªãch s·ª≠ Vi·ªát Nam',
                'isAllDay': True,
                'color': '#FFEAA7'
            }
        ]

        # Sample Users
        users = [
            {
                'name': 'Nguy·ªÖn VƒÉn An',
                'email': 'an.nguyen@example.com',
                'avatar': 'https://example.com/avatar1.jpg',
                'grade': '12',
                'school': 'THPT Chuy√™n H√† N·ªôi - Amsterdam',
                'createdAt': (now - datetime.timedelta(days=30)).isoformat(),
                'lastLoginAt': now.isoformat()
            },
            {
                'name': 'Tr·∫ßn Th·ªã B√¨nh',
                'email': 'binh.tran@example.com',
                'avatar': 'https://example.com/avatar2.jpg',
                'grade': '12',
                'school': 'THPT Chuy√™n H√† N·ªôi - Amsterdam',
                'createdAt': (now - datetime.timedelta(days=25)).isoformat(),
                'lastLoginAt': (now - datetime.timedelta(hours=2)).isoformat()
            },
            {
                'name': 'L√™ Ho√†ng C∆∞·ªùng',
                'email': 'cuong.le@example.com',
                'avatar': 'https://example.com/avatar3.jpg',
                'grade': '12',
                'school': 'THPT Chuy√™n H√† N·ªôi - Amsterdam',
                'createdAt': (now - datetime.timedelta(days=20)).isoformat(),
                'lastLoginAt': (now - datetime.timedelta(hours=5)).isoformat()
            }
        ]

        return {
            'tasks': tasks,
            'events': events,
            'users': users
        }

def main():
    """
    Main function ƒë·ªÉ ch·∫°y script import data
    """
    print("üöÄ B·∫Øt ƒë·∫ßu import data v√†o Firebase...")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o importer
    # N·∫øu c√≥ file service account, thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n ·ªü ƒë√¢y
    service_account_path = None  # "path/to/serviceAccountKey.json"
    
    # Ki·ªÉm tra xem c√≥ file service account trong th∆∞ m·ª•c hi·ªán t·∫°i kh√¥ng
    current_dir = os.path.dirname(os.path.abspath(__file__))
    possible_keys = [
        os.path.join(current_dir, "serviceAccountKey.json"),
        os.path.join(current_dir, "firebase-key.json"),
        os.path.join(current_dir, "firebase-credentials.json"),
        os.path.join(current_dir, "studybuddy-8bfaa-firebase-adminsdk-fbsvc-76aae6727d.json"),
    ]
    
    for key_path in possible_keys:
        if os.path.exists(key_path):
            service_account_path = key_path
            print(f"üîë T√¨m th·∫•y Service Account key: {key_path}")
            break
    
    try:
        importer = StudyBuddyDataImporter(service_account_path)
        
        # L·∫•y sample data
        sample_data = importer.get_sample_data()
        
        # H·ªèi user c√≥ mu·ªën x√≥a data c≈© kh√¥ng
        clear_old = input("üóëÔ∏è C√≥ mu·ªën x√≥a data c≈© kh√¥ng? (y/N): ").lower().strip() == 'y'
        
        if clear_old:
            print("üóëÔ∏è ƒêang x√≥a data c≈©...")
            importer.clear_collection('tasks')
            importer.clear_collection('events')
            importer.clear_collection('users')
            print("‚úÖ ƒê√£ x√≥a data c≈© th√†nh c√¥ng!")
        
        # Import data
        print("\nüìä B·∫Øt ƒë·∫ßu import data...")
        importer.import_tasks(sample_data['tasks'])
        importer.import_events(sample_data['events'])
        importer.import_users(sample_data['users'])
        
        print("\nüéâ Import data th√†nh c√¥ng!")
        print("=" * 50)
        print("üìù ƒê√£ import:")
        print(f"   - {len(sample_data['tasks'])} tasks")
        print(f"   - {len(sample_data['events'])} events")
        print(f"   - {len(sample_data['users'])} users")
        print("=" * 50)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 