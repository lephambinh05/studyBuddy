#!/usr/bin/env python3
"""
Script build iOS cho TestFlight
"""

import subprocess
import os
import json
from pathlib import Path

def check_ios_environment():
    """Ki·ªÉm tra m√¥i tr∆∞·ªùng iOS"""
    print("üîç Ki·ªÉm tra m√¥i tr∆∞·ªùng iOS...")
    
    # Ki·ªÉm tra macOS
    if os.name != 'posix':
        print("‚ùå C·∫ßn macOS ƒë·ªÉ build iOS")
        return False
    
    # Ki·ªÉm tra Xcode
    try:
        result = subprocess.run(['xcodebuild', '-version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Xcode ƒë√£ c√†i ƒë·∫∑t")
            print(result.stdout.strip())
        else:
            print("‚ùå Xcode ch∆∞a c√†i ƒë·∫∑t")
            return False
    except FileNotFoundError:
        print("‚ùå Xcode ch∆∞a c√†i ƒë·∫∑t")
        return False
    
    # Ki·ªÉm tra iOS devices
    try:
        result = subprocess.run(['xcrun', 'devicectl', 'list', 'devices'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ iOS devices:")
            print(result.stdout)
        else:
            print("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y iOS devices")
    except FileNotFoundError:
        print("‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra iOS devices")
    
    return True

def check_firebase_ios_config():
    """Ki·ªÉm tra c·∫•u h√¨nh Firebase cho iOS"""
    print("\nüîç Ki·ªÉm tra c·∫•u h√¨nh Firebase iOS...")
    
    # Ki·ªÉm tra GoogleService-Info.plist
    ios_config_path = "ios/Runner/GoogleService-Info.plist"
    if Path(ios_config_path).exists():
        print("‚úÖ GoogleService-Info.plist ƒë√£ t·ªìn t·∫°i")
        return True
    else:
        print("‚ùå GoogleService-Info.plist ch∆∞a c√≥")
        print("H√£y t·∫£i t·ª´ Firebase Console v√† ƒë·∫∑t v√†o ios/Runner/")
        return False

def build_ios_app():
    """Build iOS app"""
    print("\nüöÄ Build iOS app...")
    
    commands = [
        ("flutter clean", "Clean project"),
        ("flutter pub get", "Get dependencies"),
        ("flutter build ios --release", "Build iOS release"),
    ]
    
    for command, description in commands:
        print(f"\nüîß {description}...")
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {description} th√†nh c√¥ng!")
            else:
                print(f"‚ùå {description} th·∫•t b·∫°i!")
                print(f"L·ªói: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå L·ªói khi {description}: {e}")
            return False
    
    return True

def create_ipa():
    """T·∫°o IPA file cho TestFlight"""
    print("\nüì¶ T·∫°o IPA file...")
    
    # T·∫°o archive
    archive_cmd = [
        'xcodebuild', '-workspace', 'ios/Runner.xcworkspace',
        '-scheme', 'Runner', '-configuration', 'Release',
        '-archivePath', 'build/ios/Runner.xcarchive',
        'archive'
    ]
    
    try:
        result = subprocess.run(archive_cmd, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Archive th√†nh c√¥ng!")
        else:
            print("‚ùå Archive th·∫•t b·∫°i!")
            print(f"L·ªói: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o archive: {e}")
        return False
    
    # Export IPA
    export_cmd = [
        'xcodebuild', '-exportArchive',
        '-archivePath', 'build/ios/Runner.xcarchive',
        '-exportPath', 'build/ios/',
        '-exportOptionsPlist', 'ios/ExportOptions.plist'
    ]
    
    try:
        result = subprocess.run(export_cmd, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ IPA export th√†nh c√¥ng!")
            print("üì± IPA file: build/ios/Runner.ipa")
            return True
        else:
            print("‚ùå IPA export th·∫•t b·∫°i!")
            print(f"L·ªói: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi export IPA: {e}")
        return False

def create_export_options():
    """T·∫°o file ExportOptions.plist"""
    print("\nüìù T·∫°o ExportOptions.plist...")
    
    export_options = {
        "method": "app-store",
        "teamID": "YOUR_TEAM_ID",
        "signingStyle": "automatic",
        "stripSwiftSymbols": True,
        "uploadBitcode": False,
        "uploadSymbols": True
    }
    
    export_path = "ios/ExportOptions.plist"
    try:
        import plistlib
        with open(export_path, 'wb') as f:
            plistlib.dump(export_options, f)
        print("‚úÖ ExportOptions.plist ƒë√£ t·∫°o")
        print("‚ö†Ô∏è  H√£y thay YOUR_TEAM_ID b·∫±ng Team ID c·ªßa b·∫°n")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o ExportOptions.plist: {e}")
        return False

def show_testflight_guide():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n upload TestFlight"""
    print("\nüìã H∆Ø·ªöNG D·∫™N UPLOAD TESTFLIGHT:")
    print("1. M·ªü Xcode")
    print("2. Ch·ªçn Window > Organizer")
    print("3. Ch·ªçn tab 'Archives'")
    print("4. Ch·ªçn archive v·ª´a t·∫°o")
    print("5. Click 'Distribute App'")
    print("6. Ch·ªçn 'App Store Connect'")
    print("7. Ch·ªçn 'Upload'")
    print("8. ƒêi·ªÅn th√¥ng tin v√† upload")
    print("9. Ki·ªÉm tra App Store Connect > TestFlight")

def main():
    """H√†m ch√≠nh"""
    print("üçé BUILD IOS CHO TESTFLIGHT")
    print("=" * 50)
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not check_ios_environment():
        print("\n‚ùå M√¥i tr∆∞·ªùng iOS ch∆∞a s·∫µn s√†ng!")
        print("C·∫ßn:")
        print("- macOS")
        print("- Xcode")
        print("- iOS device ho·∫∑c simulator")
        return
    
    # Ki·ªÉm tra c·∫•u h√¨nh Firebase
    if not check_firebase_ios_config():
        print("\n‚ö†Ô∏è  C·∫ßn c·∫•u h√¨nh Firebase iOS tr∆∞·ªõc!")
        return
    
    # T·∫°o ExportOptions.plist
    create_export_options()
    
    # Build app
    if not build_ios_app():
        print("\n‚ùå Build th·∫•t b·∫°i!")
        return
    
    # T·∫°o IPA
    if not create_ipa():
        print("\n‚ùå T·∫°o IPA th·∫•t b·∫°i!")
        return
    
    print("\nüéâ BUILD TH√ÄNH C√îNG!")
    print("üì± IPA file: build/ios/Runner.ipa")
    
    show_testflight_guide()

if __name__ == "__main__":
    main() 